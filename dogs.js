(() => {
  const btn = document.getElementById('newDog');
  const dogDiv = document.getElementById('dog');

  // –°–ø–∏—Å–æ–∫ –ø–æ—Ä–æ–¥
  const breeds = [
    'shiba',
    'retriever',
    'husky',
    'poodle',
    'beagle',
    'boxer',
    'bulldog',
    'chihuahua'
  ];

  async function fetchDogByBreed(breed) {
    const url = `https://dog.ceo/api/breed/${breed}/images/random`;
    const res = await fetch(url);
    if (!res.ok) throw new Error(`HTTP ${res.status}`);
    const data = await res.json();
    if (data.status !== 'success') throw new Error('API –≤–µ—Ä–Ω—É–ª–æ –æ—à–∏–±–∫—É');
    return data.message;
  }

  async function fetchRandomDog() {
    const url = `https://dog.ceo/api/breeds/image/random`;
    const res = await fetch(url);
    if (!res.ok) throw new Error(`HTTP ${res.status}`);
    const data = await res.json();
    if (data.status !== 'success') throw new Error('API –≤–µ—Ä–Ω—É–ª–æ –æ—à–∏–±–∫—É');
    return data.message;
  }

  btn.addEventListener('click', async () => {
    btn.disabled = true;
    const originalText = btn.textContent;
    btn.textContent = '–ó–∞–≥—Ä—É–∂–∞–µ–º...';
    dogDiv.innerHTML = '<div class="loading-message">–ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–±–∞—á–∫—É...</div>';

    try {
      const randomBreed = breeds[Math.floor(Math.random() * breeds.length)];
      let imageUrl;

      try {
        imageUrl = await fetchDogByBreed(randomBreed);
      } catch (err) {
        console.warn('–û—à–∏–±–∫–∞ —Å –ø–æ—Ä–æ–¥–æ–π, –ø—Ä–æ–±—É–µ–º –æ–±—â–∏–π —ç–Ω–¥–ø–æ–∏–Ω—Ç:', err);
        imageUrl = await fetchRandomDog();
      }

      const img = document.createElement('img');
      img.alt = `–°–æ–±–∞–∫–∞ (${randomBreed || 'random'})`;
      img.style.maxWidth = '100%';
      img.style.maxHeight = '100%';
      img.style.display = 'block';

      await new Promise((resolve, reject) => {
        let timedOut = false;
        const timeoutId = setTimeout(() => {
          timedOut = true;
          reject(new Error('–¢–∞–π–º–∞—É—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è'));
        }, 10000);

        img.onload = () => {
          if (!timedOut) {
            clearTimeout(timeoutId);
            resolve();
          }
        };

        img.onerror = () => {
          clearTimeout(timeoutId);
          reject(new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è'));
        };

        img.src = imageUrl;
      });

      dogDiv.innerHTML = '';
      dogDiv.appendChild(img);
    } catch (error) {
      console.error('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:', error);
      dogDiv.innerHTML = `
        <div class="error-message">
          –£–ø—Å‚Ä¶ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ–±–∞—á–∫—É üòî<br>
          –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.
        </div>
      `;
    } finally {
      btn.disabled = false;
      btn.textContent = originalText;
    }
  });

  console.log('dogs.js —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω ‚úÖ');
})();
